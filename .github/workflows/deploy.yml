name: Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
      GKE_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
      DOCKER_IMAGE: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/interview/generalfocus/interview-api:latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        install_components: 'beta'

    - name: Create GCP Service Account Key File
      run: echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" | base64 --decode > /tmp/gcp-key.json

    - name: Authenticate to Google Cloud
      run: gcloud auth activate-service-account --key-file=/tmp/gcp-key.json

    - name: Configure Docker to use the GCP Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build --platform linux/amd64 -t ${DOCKER_IMAGE} Endpoint/
        docker push ${DOCKER_IMAGE}

    - name: Initialize Terraform
      run: terraform init
      working-directory: TerraForm/
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json

    - name: Apply Terraform
      run: terraform apply -auto-approve
      working-directory: TerraForm/
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json

    - name: Get GKE Credentials
      run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_CLUSTER_ZONE }}

    - name: Install gke-gcloud-auth-plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin

    - name: Create Kubernetes Docker Registry Secret
      run: |
        kubectl create secret docker-registry artifact-registry-key \
          --docker-server=us-central1-docker.pkg.dev \
          --docker-username=_json_key \
          --docker-password="$(cat /tmp/gcp-key.json)" \
          --docker-email=${{ secrets.GCP_EMAIL }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to GKE
      run: kubectl apply -f k8s/deployment.yaml 

    - name: Wait for Deployment to Complete
      run: kubectl rollout status deployment/interview-api-deployment --timeout=10m

    - name: Check Pod Status
      run: kubectl get pods -l app=interview-api

    - name: Describe Deployment
      run: kubectl describe deployment interview-api-deployment

    - name: Check Pod Logs
      run: |
        POD_NAME=$(kubectl get pods -l app=interview-api -o jsonpath="{.items[0].metadata.name}")
        kubectl logs $POD_NAME

    - name: Check Kubernetes Events
      run: kubectl get events --sort-by='.lastTimestamp'

    - name: Verify API is Accessible
      run: |
        echo "Waiting for service external IP..."
        sleep 30  # Wait for the LoadBalancer to provision an external IP
        SERVICE_IP=""
        while [ -z "$SERVICE_IP" ]; do
          echo "Fetching external IP..."
          SERVICE_IP=$(kubectl get svc interview-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          [ -z "$SERVICE_IP" ] && sleep 10
        done
        echo "Service External IP: $SERVICE_IP"
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVICE_IP/api/v1/time)
        if [ "$RESPONSE" -ne 200 ]; then
          echo "API is not accessible, received HTTP status $RESPONSE"
          exit 1
        else
          echo "API is accessible with HTTP status $RESPONSE"
        fi
      shell: bash
